name: Simple Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: myapp

    env:
      DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }} 

    steps:
    # 1. Checkout code
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Set up Java
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'

    # 3. Update patch version
    - name: Update patch version
      run: |
        # Get current version from pom.xml
        CURRENT_VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
        echo "Current version: $CURRENT_VERSION"
        # Remove "-SNAPSHOT" if present
        BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
        # Increment PATCH version
        PATCH=$((PATCH+1))
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "New version: $NEW_VERSION"
        # Set new version in pom.xml
        mvn versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git commit -am "ci: update patch version to ${NEW_VERSION}" || echo "No version changes"
        # push the updated pom.xml
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:master
        # Set new version as environment variable
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

    # 4. Build jar with Maven
    - name: Build Jar
      run: mvn clean package -DskipTests

    # 5. Build Docker image (with both version & latest tags)
    - name: Build Docker image
      run: |
        echo "Building Docker image with version: $VERSION" and latest
        docker build -t $DOCKERHUB_REPO:$VERSION -t $DOCKERHUB_REPO:latest .

    # 6. Login to Docker Hub
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PAT }}

    # 7. Push Docker images
    - name: Push Docker image
      run: |
        echo "Pushing Docker image with version: $VERSION" and latest
        echo $DOCKERHUB_REPO
        docker push $DOCKERHUB_REPO:$VERSION
        docker push $DOCKERHUB_REPO:latest

    # 8. Pull Docker image (to verify push worked and simulate deployment step)
    - name: Pull Docker image
      run: |
        echo "Pulling image: $DOCKERHUB_REPO:$VERSION"
        docker pull $DOCKERHUB_REPO:$VERSION

    # 9. Run Docker image locally
    - name: Run Docker container
      run: |
        echo "Running Docker container from image: $DOCKERHUB_REPO:$VERSION"
        docker run -d -p 8080:8080 --name myapp-test $DOCKERHUB_REPO:$VERSION
        sleep 10
        docker logs myapp-test
        docker stop myapp-test
    
    # 10. Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # 11. Install Helm
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    #12. Print Helm version
    - name: Check Helm version
      run: helm version

    # 13. Configure kubeconfig for EKS
    - name: Update kubeconfig for EKS
      run: aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    # 14. Deploy Helm chart to EKS  
    - name: Deploy Helm Chart
      run: |
        echo "Deploying Helm chart..."
        echo "Image repository: $DOCKERHUB_REPO"
        echo "Tag: $VERSION"
        helm upgrade --install myapp ../helm/myapp \
        --set image.tag=$VERSION \
        --set image.repository=$DOCKERHUB_REPO \
        # Verify deployment
        kubectl get all
        kubectl get pods
        kubectl get svc
        kubectl describe svc myapp